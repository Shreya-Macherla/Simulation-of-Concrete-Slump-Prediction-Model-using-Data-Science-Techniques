# -*- coding: utf-8 -*-
"""Shreya-concrete-slump-test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CWcp69X_Qza37NgjGuKKvKkL-aqic7Zq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
import seaborn as sns

#df = pd.read_csv(r"C:\Users\mache\Downloads\Programming for Data Analysis\Data set\slump_test.data")
df = pd.read_csv("slump_test.data")
#data filtering
df = df.drop(['No'], axis=1)
print(type(df))

df.head()

df.info()
print(df.columns)
print(df.index)
print(df.values)

# Data Cleaning
df.isnull()

# checked for null values
df.isnull().sum()

# Descriptive statistics for each column
df.describe()

#drops rows with missing values
df = df.dropna(axis=0)
df

df.shape

print (df.describe())
df.boxplot()
df.hist()

# Data Exploration
print(df.corr())
correlationMatrix=df.corr(method='spearman')
ax = sns.heatmap(correlationMatrix, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(0, 250, n=50), square=True)
ax.set_xticklabels(ax.get_xticklabels(), rotation=50, horizontalalignment='right');

# Data Exploration
sns.pairplot(df)

sns.heatmap(df.corr(), annot=True, cmap='Blues')

def rmse(targets, predictions):
    return np.sqrt(((predictions - targets) ** 2).mean())

#feature selection
input_variables = ['Cement','Slag','Fly ash','Water','SP','Coarse Aggr.','Fine Aggr.']
output_variables = ['SLUMP(cm)','FLOW(cm)','Compressive Strength (28-day)(Mpa)']
x = df[input_variables]
y = df[output_variables]

#coverting to numpy array
x=np.array(x)
y=np.array(y)

#data splitting
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

"""# Simple Linear Regression"""

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(X_train, y_train)

reg.coef_

y_pred = reg.predict(X_test)

print(f'The R2 score is: {r2_score(y_test, y_pred)}')
print(f'The RMSE score is {rmse(y_test, y_pred)}')

y_pred = reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).min())

# Average test error
dfTest=y_test-reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).min())

plt.scatter(y_train, reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

y_train

"""# Multiple Linear Regression"""

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

print(f'The R2 score is: {r2_score(y_test, y_pred)}')
print(f'The RMSE score is {rmse(y_test, y_pred)}')

reg.coef_

y_pred = reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

plt.scatter(y_train, reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

"""# Polynomial Regression"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(x, y)

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(x)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

lin_reg_2.coef_

y_pred = lin_reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=lin_reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=lin_reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

print(f'The R2 score is: {r2_score(y, lin_reg_2.predict(X_poly))}')
print(f'The RMSE score is {rmse(y, lin_reg_2.predict(X_poly))}')

# Average training error
dfTrain=y_train-lin_reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-lin_reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

plt.scatter(y_train, lin_reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, lin_reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

"""# Ridge Regression"""

from sklearn.linear_model import Ridge
reg = Ridge()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

print(f'The R2 score is: {r2_score(y_test, y_pred)}')
print(f'The RMSE score is {rmse(y_test, y_pred)}')

reg.coef_

y_pred = reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

plt.scatter(y_train, reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

"""# Lasso Regression"""

from sklearn.linear_model import Lasso
reg = Lasso(alpha=1.2)
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

print(f'The R2 score is: {r2_score(y_test, y_pred)}')
print(f'The RMSE score is {rmse(y_test, y_pred)}')

reg.coef_

y_pred = reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

plt.scatter(y_train, reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

"""# Elastic Net Regression"""

from sklearn.linear_model import ElasticNet
reg = ElasticNet()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

print(f'The R2 score is: {r2_score(y_test, y_pred)}')
print(f'The RMSE score is {rmse(y_test, y_pred)}')

reg.coef_

y_pred = reg.predict(X_test)
#print(f'The R2 score is: {r2_score(Y_test, y_pred)}')
#print(f'The RMSE score is {rmse(Y_test, y_pred)}')
print("Making predictions for the following in train set:")
predicted_values=reg.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=reg.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-reg.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-reg.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

plt.scatter(y_train, reg.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, reg.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

print(type(x))
print(type(y))

"""# Decision Tree Regression

"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score 

dt_model = DecisionTreeRegressor(random_state=1, splitter='best', max_depth=10, max_features=7, min_samples_leaf=2)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)

print("Making predictions for the following in train set:")
predicted_values=dt_model.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=dt_model.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-dt_model.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-dt_model.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

print("Model\t\t\t\t RMSE \t\t R2") 
print("""Decision Tree Regressor \t {:.2f} \t\t{:.2f}""".format( np.sqrt(mean_squared_error(y_test, y_pred_dt)), r2_score(y_test, y_pred_dt)))

plt.scatter(y_train, dt_model.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, dt_model.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

"""# Random Forest Regression """

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

num_trees=8
rf_model = RandomForestRegressor(random_state=1, max_depth=11, max_samples=82, max_features=7, n_estimators=8)

#Fit RandomForestRegressor model
rf_model.fit(X_train, y_train)
y_pred_rfr = rf_model.predict(X_test) 


print("Making predictions for the following in train set:")
predicted_values=rf_model.predict(X_train[0:4,:])
true_values=y_train[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)


print("Making predictions for the following in testing set:")
predicted_values=rf_model.predict(X_test[0:4,:])
true_values=y_test[0:4]
print("True values are ",true_values)
print("The predicted values are", predicted_values)
print("Diff", predicted_values-true_values)

# Average training error
dfTrain=y_train-rf_model.predict(X_train)
print("Average Train error ", np.absolute(dfTrain).mean())

# Average test error
dfTest=y_test-rf_model.predict(X_test)
print("Average test error ", np.absolute(dfTest).mean())

print("Model\t\t\t\t RMSE \t\t R2") 
print("""Random Forest Regressor \t {:.2f} \t\t{:.2f}""".format( np.sqrt(mean_squared_error(y_test, y_pred_rfr)), r2_score(y_test, y_pred_rfr)))

plt.scatter(y_train, rf_model.predict(X_train))
plt.title('Predictions vs True Values (Training)')
plt.xlabel('True Values')
plt.ylabel('Prediction')

plt.scatter(y_test, rf_model.predict(X_test))
plt.title('Predictions vs True Values (Test)')
plt.xlabel('True Values')
plt.ylabel('Prediction')